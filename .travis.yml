# ignored on non-linux platforms, but bionic is required for nested virtualization
branches:
    only:
        - master
cache:
    directories:
        - node_modules
env:
    global:
        - COMPILE_API=29
        - ANDROID_BUILD_TOOLS=29.0.2
        - ANDROID_HOME=${HOME}/android-sdk
        - ANDROID_TOOLS_URL="https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip"
        # PATH order is incredibly important. e.g. the 'emulator' script exists in more than one place!
        - PATH=${ANDROID_HOME}:${ANDROID_HOME}/emulator:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools:${PATH}
        - LATEST_NATIVE_TEMPLATE_VERSION=$(git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags https://github.com/mendix/native-template '*.*.*'  | tail -n 1 | cut -d "/" -f 3)
        - LATEST_CURRENT_VERSION=$(git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags https://github.com/mendixlabs/travisAndroid '*.*.*'  | tail -n 1 | cut -d "/" -f 3)
stages:
    - name: test
      if: LATEST_NATIVE_TEMPLATE_VERSION != LATEST_CURRENT_VERSION
jobs:
    fast_finish: true
    include:
          - name: "Prepare apk"
            dist: bionic
            language: java
            jdk:
                - openjdk8
            script:
                - set -e
                - curl https://github.com/mendix/native-template/archive/${LATEST_NATIVE_TEMPLATE_VERSION}.zip -L -o ./native-template.zip
                - unzip native-template.zip
                - cd native-template-${LATEST_NATIVE_TEMPLATE_VERSION:1}
                - npm install
                - cd android
                - ./gradlew assembleAppstoreDebug assembleAppstoreDebugAndroidTest -DtestBuildType=debug
                - mkdir -p $HOME/app/android
                - mv app/build/outputs/apk/appstore/debug/app-appstore-debug.apk $HOME/app/android/
                - mv app/build/outputs/apk/androidTest/appstore/debug/app-appstore-debug-androidTest.apk $HOME/app/android/
            before_deploy:
                # Set up git user name and tag this commit
                - git config --local user.name $GITHUB_USER
                - git config --local user.email $GITHUB_EMAIL
                - export TRAVIS_TAG=${TRAVIS_TAG:-$VERSION}
                - git tag $TRAVIS_TAG
            deploy:
                provider: releases
                api_key: $API_KEY
                file_glob: true
                file: ${HOME}/app/android/*
                skip_cleanup: true
          - name: "Prepare ipa"
            os: osx
            osx_image: xcode12.2
            script:
                - set -e
                - curl https://github.com/mendix/native-template/archive/${LATEST_NATIVE_TEMPLATE_VERSION}.zip -L -o ./native-template.zip
                - unzip native-template.zip
                - cd native-template-${LATEST_NATIVE_TEMPLATE_VERSION:1}
                - npm install
                - cd ios
                - pod install
                - xcodebuild -quiet -workspace ./NativeTemplate.xcworkspace -scheme nativeTemplate -configuration Debug -sdk iphonesimulator -derivedDataPath ./build
                - mkdir -p $HOME/app/ios
                - zip -r $HOME/app/ios/NativeTemplate.zip /build/Build/Products/Debug-iphonesimulator/NativeTemplate.apps
            before_deploy:
                # Set up git user name and tag this commit
                - git config --local user.name $GITHUB_USER
                - git config --local user.email $GITHUB_EMAIL
                - export TRAVIS_TAG=${TRAVIS_TAG:-$VERSION}
                - git tag $TRAVIS_TAG
            deploy:
                provider: releases
                api_key: $API_KEY
                file_glob: true
                file: ${HOME}/app/ios/*
                skip_cleanup: true
#        - name: "Run android"
#            before_install:
#                # Set up JDK 8 for Android SDK - Java is universally needed: codacy, unit tests, emulators
#                - ./install-emulator.sh
#            install:
#                # Set up KVM on linux for hardware acceleration. Manually here so it only happens for emulator tests, takes ~30s
#                - sudo -E apt-get -yq --no-install-suggests --no-install-recommends install bridge-utils libpulse0 libvirt-bin qemu-kvm virtinst ubuntu-vm-builder >/dev/null
#                - sudo adduser $USER libvirt
#                - sudo adduser $USER kvm
#                - echo no | avdmanager create avd --force -n Pixel_2_API_29 -k "system-images;android-${COMPILE_API};google_apis;x86_64" -c 100M # create device
#                - sudo -E sudo -u "$USER" -E bash -c "${ANDROID_HOME}/emulator/emulator -avd Pixel_2_API_29 -no-snapshot -no-window -no-boot-anim -camera-back none -camera-front none -selinux permissive -qemu -m 2048 &"
#                - echo 'Emu created'
#                - ./android-wait-for-emulator.sh
#                - adb shell input keyevent 82 & # unlocking the device
#            before_script:
#                - mkdir -p res/raw && touch res/raw/runtime_url && echo "https://travis2-sandbox.mxapps.io" > res/raw/runtime_url
#                - zip -u app-appstore-debug.apk res/raw/runtime_url
#                - echo android | ${ANDROID_HOME}/build-tools/${ANDROID_BUILD_TOOLS}/apksigner sign --ks debug.keystore app-appstore-debug.apk
#                - echo android | ${ANDROID_HOME}/build-tools/${ANDROID_BUILD_TOOLS}/apksigner sign --ks debug.keystore app-appstore-debug-androidTest.apk
#                - npm install
#            script:
#                - npm run test
